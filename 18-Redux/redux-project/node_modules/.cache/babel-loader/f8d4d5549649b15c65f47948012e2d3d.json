{"ast":null,"code":"var _jsxFileName = \"/Users/stefanovolpatti/Web Development/react-complete-guide/18-Redux/redux-project/src/components/Counter.js\",\n    _s = $RefreshSig$();\n\nimport classes from './Counter.module.css';\nimport { counterActions } from \"../store\"; // importo le mie actions\n\nimport { useDispatch, useSelector } from \"react-redux\"; //  useDispatch e useSelector METHOD => Functional Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  //  Richiamo dispatch\n  const dispatch = useDispatch(); //  funzione per il counter\n\n  const counter = useSelector(state => state.counter); //  avrò sempre l'ultimo state aggiornato\n  //  funzione per mostrare e nascondere il counter\n\n  const showCounter = useSelector(state => state.showCounter); // funzione per incrementare\n\n  const incrementHandler = () => {\n    dispatch(counterActions.increment());\n  }; // funzione per decrementare\n\n\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement());\n  }; //  funzione che icrementa di 5\n\n\n  const increaseHandler = () => {\n    dispatch(counterActions.increase()); //  il payload sarà dinamico\n  }; // funzione che mostra e nasconde il counter\n\n\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.toggleCounter());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }, this), showCounter && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: \"Increase by 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Counter, \"K8sD1S6QxuN5wk6p12Sa6g8roDA=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Counter;\nexport default Counter;\n/*// CONNECT METHOD => Class Component\n\n class Counter extends Component {\n incrementHandler() {\n this.props.increment()\n }\n\n decrementHandler() {\n this.props.decrement()\n }\n\n toggleCounterHandler() {\n }\n\n render() {\n return (\n <main className={classes.counter}>\n <h1>Redux Counter</h1>\n <div className={classes.value}>{this.props.counter}</div>\n <div>\n {/!* Con il metodo useDispatch e useSelector *!/}\n {/!*<button onClick={incrementHandler}>Increment</button>\n <button onClick={decrementHandler}>Decrement</button>*!/}\n\n {/!* Con il metodo connect *!/}\n <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n </div>\n <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n </main>\n );\n };\n }\n\n const mapStateToProps = state => {\n return {\n counter: state.counter\n }\n }\n\n const mapDispatchToProps = dispatch => {\n return {\n increment: () => dispatch({type: 'increment'}),\n decrement: () => dispatch({type: 'decrement'})\n }\n }\n\n export default connect(mapStateToProps, mapDispatchToProps)(Counter);*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/18-Redux/redux-project/src/components/Counter.js"],"names":["classes","counterActions","useDispatch","useSelector","Counter","dispatch","counter","state","showCounter","incrementHandler","increment","decrementHandler","decrement","increaseHandler","increase","toggleCounterHandler","toggleCounter","value"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,SAAQC,cAAR,QAA6B,UAA7B,C,CAAyC;;AACzC,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC,C,CAEA;;;;AACA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACrB;AACA,QAAMC,QAAQ,GAAGH,WAAW,EAA5B,CAFqB,CAIrB;;AACA,QAAMI,OAAO,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACD,OAAhB,CAA3B,CALqB,CAK+B;AACpD;;AACA,QAAME,WAAW,GAAGL,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,WAAhB,CAA/B,CAPqB,CASrB;;AACA,QAAMC,gBAAgB,GAAG,MAAM;AAC9BJ,IAAAA,QAAQ,CAACJ,cAAc,CAACS,SAAf,EAAD,CAAR;AACA,GAFD,CAVqB,CAarB;;;AACA,QAAMC,gBAAgB,GAAG,MAAM;AAC9BN,IAAAA,QAAQ,CAACJ,cAAc,CAACW,SAAf,EAAD,CAAR;AACA,GAFD,CAdqB,CAiBrB;;;AACA,QAAMC,eAAe,GAAG,MAAM;AAC7BR,IAAAA,QAAQ,CAACJ,cAAc,CAACa,QAAf,EAAD,CAAR,CAD6B,CACU;AACvC,GAFD,CAlBqB,CAqBrB;;;AACA,QAAMC,oBAAoB,GAAG,MAAM;AAClCV,IAAAA,QAAQ,CAACJ,cAAc,CAACe,aAAf,EAAD,CAAR;AACA,GAFD;;AAIA,sBACC;AAAM,IAAA,SAAS,EAAEhB,OAAO,CAACM,OAAzB;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAEEE,WAAW,iBAAI;AAAK,MAAA,SAAS,EAAER,OAAO,CAACiB,KAAxB;AAAA,gBAAgCX;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFjB,eAGC;AAAA,8BAEC;AAAQ,QAAA,OAAO,EAAEG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAQ,QAAA,OAAO,EAAEI,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD,eAIC;AAAQ,QAAA,OAAO,EAAEF,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA,YAHD,eAUC;AAAQ,MAAA,OAAO,EAAEI,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAcA,CAxCD;;GAAMX,O;UAEYF,W,EAGDC,W,EAEIA,W;;;KAPfC,O;AAyCN,eAAeA,OAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import classes from './Counter.module.css';\nimport {counterActions} from \"../store\"; // importo le mie actions\nimport {useDispatch, useSelector} from \"react-redux\";\n\n//  useDispatch e useSelector METHOD => Functional Component\nconst Counter = () => {\n\t//  Richiamo dispatch\n\tconst dispatch = useDispatch()\n\n\t//  funzione per il counter\n\tconst counter = useSelector(state => state.counter) //  avrò sempre l'ultimo state aggiornato\n\t//  funzione per mostrare e nascondere il counter\n\tconst showCounter = useSelector(state => state.showCounter)\n\n\t// funzione per incrementare\n\tconst incrementHandler = () => {\n\t\tdispatch(counterActions.increment())\n\t}\n\t// funzione per decrementare\n\tconst decrementHandler = () => {\n\t\tdispatch(counterActions.decrement())\n\t}\n\t//  funzione che icrementa di 5\n\tconst increaseHandler = () => {\n\t\tdispatch(counterActions.increase())    //  il payload sarà dinamico\n\t}\n\t// funzione che mostra e nasconde il counter\n\tconst toggleCounterHandler = () => {\n\t\tdispatch(counterActions.toggleCounter())\n\t};\n\n\treturn (\n\t\t<main className={classes.counter}>\n\t\t\t<h1>Redux Counter</h1>\n\t\t\t{showCounter && <div className={classes.value}>{counter}</div>}\n\t\t\t<div>\n\t\t\t\t{/* Con il metodo useDispatch e useSelector */}\n\t\t\t\t<button onClick={incrementHandler}>Increment</button>\n\t\t\t\t<button onClick={increaseHandler}>Increase by 10</button>\n\t\t\t\t<button onClick={decrementHandler}>Decrement</button>\n\t\t\t</div>\n\t\t\t{/* Con il metodo connect */}\n\t\t\t<button onClick={toggleCounterHandler}>Toggle Counter</button>\n\t\t</main>\n\t)\n}\nexport default Counter;\n\n/*// CONNECT METHOD => Class Component\n\n class Counter extends Component {\n incrementHandler() {\n this.props.increment()\n }\n\n decrementHandler() {\n this.props.decrement()\n }\n\n toggleCounterHandler() {\n }\n\n render() {\n return (\n <main className={classes.counter}>\n <h1>Redux Counter</h1>\n <div className={classes.value}>{this.props.counter}</div>\n <div>\n {/!* Con il metodo useDispatch e useSelector *!/}\n {/!*<button onClick={incrementHandler}>Increment</button>\n <button onClick={decrementHandler}>Decrement</button>*!/}\n\n {/!* Con il metodo connect *!/}\n <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n </div>\n <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n </main>\n );\n };\n }\n\n const mapStateToProps = state => {\n return {\n counter: state.counter\n }\n }\n\n const mapDispatchToProps = dispatch => {\n return {\n increment: () => dispatch({type: 'increment'}),\n decrement: () => dispatch({type: 'decrement'})\n }\n }\n\n export default connect(mapStateToProps, mapDispatchToProps)(Counter);*/\n"]},"metadata":{},"sourceType":"module"}