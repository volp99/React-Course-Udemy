{"ast":null,"code":"var _jsxFileName = \"/Users/stefanovolpatti/Web Development/react-complete-guide/18-Redux/redux-project/src/components/Counter.js\",\n    _s = $RefreshSig$();\n\nimport classes from './Counter.module.css'; //  useDispatch e useSelector METHOD\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  const dispatch = useDispatch(); //  Richiamo dispatch\n\n  const counter = useSelector(state => state.counter); //  avrò sempre l'ultimo state aggiornato\n  // funzione per incrementare\n\n  const incrementHandler = () => {\n    dispatch({\n      type: 'increment'\n    });\n  }; // funzione per decrementare\n\n\n  const decrementHandler = () => {\n    dispatch({\n      type: 'decrement'\n    });\n  };\n\n  const toggleCounterHandler = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: this.props.counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n};\n/*// CONNECT METHOD\n\n class Counter extends Component {\n incrementHandler() {\n this.props.increment()\n }\n\n decrementHandler() {\n this.props.decrement()\n }\n\n toggleCounterHandler() {\n }\n\n render() {\n return (\n <main className={classes.counter}>\n <h1>Redux Counter</h1>\n <div className={classes.value}>{this.props.counter}</div>\n <div>\n {/!* Con il metodo useDispatch e useSelector *!/}\n {/!*<button onClick={incrementHandler}>Increment</button>\n <button onClick={decrementHandler}>Decrement</button>*!/}\n\n {/!* Con il metodo connect *!/}\n <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n </div>\n <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n </main>\n );\n };\n }\n\n const mapStateToProps = state => {\n return {\n counter: state.counter\n }\n }\n\n const mapDispatchToProps = dispatch => {\n return {\n increment: () => dispatch({type: 'increment'}),\n decrement: () => dispatch({type: 'decrement'})\n }\n }\n\n export default connect(mapStateToProps, mapDispatchToProps)(Counter);*/\n\n\n_s(Counter, \"gthwM6sqboLtlTmr2wLRFX51eJQ=\", true);\n\n_c = Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/18-Redux/redux-project/src/components/Counter.js"],"names":["classes","Counter","dispatch","useDispatch","counter","useSelector","state","incrementHandler","type","decrementHandler","toggleCounterHandler","value","props"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,sBAApB,C,CAEA;;;;AACA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACrB,QAAMC,QAAQ,GAAGC,WAAW,EAA5B,CADqB,CACW;;AAChC,QAAMC,OAAO,GAAGC,WAAW,CAACC,KAAK,IAAIA,KAAK,CAACF,OAAhB,CAA3B,CAFqB,CAE+B;AAEpD;;AACA,QAAMG,gBAAgB,GAAG,MAAM;AAC9BL,IAAAA,QAAQ,CAAC;AAACM,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACA,GAFD,CALqB,CAQrB;;;AACA,QAAMC,gBAAgB,GAAG,MAAM;AAC9BP,IAAAA,QAAQ,CAAC;AAACM,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACA,GAFD;;AAIA,QAAME,oBAAoB,GAAG,MAAM,CAClC,CADD;;AAEA,sBACC;AAAM,IAAA,SAAS,EAAEV,OAAO,CAACI,OAAzB;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAK,MAAA,SAAS,EAAEJ,OAAO,CAACW,KAAxB;AAAA,gBAAgC,KAAKC,KAAL,CAAWR;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAA,8BAEC;AAAQ,QAAA,OAAO,EAAEG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAQ,QAAA,OAAO,EAAEE,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA,YAHD,eAYC;AAAQ,MAAA,OAAO,EAAE,KAAKC,oBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAgBA,CA/BD;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAhFMT,O;;KAAAA,O","sourcesContent":["import classes from './Counter.module.css';\n\n//  useDispatch e useSelector METHOD\nconst Counter = () => {\n\tconst dispatch = useDispatch()  //  Richiamo dispatch\n\tconst counter = useSelector(state => state.counter) //  avrò sempre l'ultimo state aggiornato\n\n\t// funzione per incrementare\n\tconst incrementHandler = () => {\n\t\tdispatch({type: 'increment'})\n\t}\n\t// funzione per decrementare\n\tconst decrementHandler = () => {\n\t\tdispatch({type: 'decrement'})\n\t}\n\n\tconst toggleCounterHandler = () => {\n\t};\n\treturn (\n\t\t<main className={classes.counter}>\n\t\t\t<h1>Redux Counter</h1>\n\t\t\t<div className={classes.value}>{this.props.counter}</div>\n\t\t\t<div>\n\t\t\t\t{/* Con il metodo useDispatch e useSelector */}\n\t\t\t\t<button onClick={incrementHandler}>Increment</button>\n\t\t\t\t<button onClick={decrementHandler}>Decrement</button>\n\n\t\t\t\t{/* Con il metodo connect */}\n\t\t\t\t{/*   <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n\t\t\t\t <button onClick={this.decrementHandler.bind(this)}>Decrement</button>*/}\n\t\t\t</div>\n\t\t\t<button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n\t\t</main>\n\t)\n}\n\n/*// CONNECT METHOD\n\n class Counter extends Component {\n incrementHandler() {\n this.props.increment()\n }\n\n decrementHandler() {\n this.props.decrement()\n }\n\n toggleCounterHandler() {\n }\n\n render() {\n return (\n <main className={classes.counter}>\n <h1>Redux Counter</h1>\n <div className={classes.value}>{this.props.counter}</div>\n <div>\n {/!* Con il metodo useDispatch e useSelector *!/}\n {/!*<button onClick={incrementHandler}>Increment</button>\n <button onClick={decrementHandler}>Decrement</button>*!/}\n\n {/!* Con il metodo connect *!/}\n <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n </div>\n <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n </main>\n );\n };\n }\n\n const mapStateToProps = state => {\n return {\n counter: state.counter\n }\n }\n\n const mapDispatchToProps = dispatch => {\n return {\n increment: () => dispatch({type: 'increment'}),\n decrement: () => dispatch({type: 'decrement'})\n }\n }\n\n export default connect(mapStateToProps, mapDispatchToProps)(Counter);*/\n"]},"metadata":{},"sourceType":"module"}