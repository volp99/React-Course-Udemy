{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n    const sendRequest = as;\n    const response = await fetch('https://redux-back-end-default-rtdb.europe-west1.firebasedatabase.app/cart.json', {\n      method: 'PUT',\n      body: JSON.stringify(cart)\n    });\n\n    if (!response.ok) {\n      throw new Error('Sending cart data failed.');\n    }\n\n    dispatch(uiActions.showNotification({\n      status: 'success',\n      title: 'Success!',\n      message: 'Sent cart data successfully!'\n    }));\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/19-Advanced-Redux/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","as","response","fetch","method","body","JSON","stringify","ok","Error","cartActions","actions"],"mappings":"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","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\nimport {uiActions} from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n\tname: 'cart',\n\tinitialState: {\n\t\titems: [],\n\t\ttotalQuantity: 0,\n\t},\n\treducers: {\n\t\treplaceCart(state, action) {\n\t\t\tstate.totalQuantity = action.payload.totalQuantity;\n\t\t\tstate.items = action.payload.items;\n\t\t},\n\t\taddItemToCart(state, action) {\n\t\t\tconst newItem = action.payload;\n\t\t\tconst existingItem = state.items.find((item) => item.id === newItem.id);\n\t\t\tstate.totalQuantity++;\n\t\t\tif (!existingItem) {\n\t\t\t\tstate.items.push({\n\t\t\t\t\tid: newItem.id,\n\t\t\t\t\tprice: newItem.price,\n\t\t\t\t\tquantity: 1,\n\t\t\t\t\ttotalPrice: newItem.price,\n\t\t\t\t\tname: newItem.title,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\texistingItem.quantity++;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice + newItem.price;\n\t\t\t}\n\t\t},\n\t\tremoveItemFromCart(state, action) {\n\t\t\tconst id = action.payload;\n\t\t\tconst existingItem = state.items.find((item) => item.id === id);\n\t\t\tstate.totalQuantity--;\n\t\t\tif (existingItem.quantity === 1) {\n\t\t\t\tstate.items = state.items.filter((item) => item.id !== id);\n\t\t\t} else {\n\t\t\t\texistingItem.quantity--;\n\t\t\t}\n\t\t},\n\t},\n});\n\nconst sendCartData = (cart) => {\n\treturn async (dispatch) => {\n\t\tdispatch(\n\t\t\tuiActions.showNotification({\n\t\t\t\tstatus: 'pending',\n\t\t\t\ttitle: 'Sending...',\n\t\t\t\tmessage: 'Sending cart data!',\n\t\t\t})\n\t\t)\n\n\t\tconst sendRequest = as\n\n\t\tconst response = await fetch(\n\t\t\t'https://redux-back-end-default-rtdb.europe-west1.firebasedatabase.app/cart.json',\n\t\t\t{\n\t\t\t\tmethod: 'PUT',\n\t\t\t\tbody: JSON.stringify(cart),\n\t\t\t}\n\t\t);\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error('Sending cart data failed.');\n\t\t}\n\t\tdispatch(\n\t\t\tuiActions.showNotification({\n\t\t\t\tstatus: 'success',\n\t\t\t\ttitle: 'Success!',\n\t\t\t\tmessage: 'Sent cart data successfully!',\n\t\t\t})\n\t\t);\n\t}\n}\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}