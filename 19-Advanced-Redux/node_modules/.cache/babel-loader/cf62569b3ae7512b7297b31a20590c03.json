{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existing = state.items.find(item => item.id === newItem.id); //  se già ci sono elementi\n\n      if (!existing) {\n        // se non ci sono elementi, pushali\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existing.quantity++; //  altrimenti aggiungi quantità\n\n        existing.totalPrice = existing.totalPrice + newItem.price; //  e aggiorna il prezzo totale\n      }\n    },\n\n    removeItemToCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id); //  trova gli elementi già presenti\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id); //  smetti di togliere gli elementi\n      } else {\n        existingItem.quantity--; //  altrimenti rimuovi elementi\n\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price; // e aggiorna il prezzo totale\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/19-Advanced-Redux/src/store/cart-slice.js"],"names":["createSlice","initialState","items","totalQuantity","cartSlice","name","reducers","addItemToCart","state","action","newItem","payload","existing","find","item","id","push","itemId","price","quantity","totalPrice","title","removeItemToCart","existingItem","filter","cartActions","actions"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,YAAY,GAAG;AAACC,EAAAA,KAAK,EAAE,EAAR;AAAYC,EAAAA,aAAa,EAAE;AAA3B,CAArB;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC7BK,EAAAA,IAAI,EAAE,MADuB;AAE7BJ,EAAAA,YAF6B;AAG7BK,EAAAA,QAAQ,EAAE;AACTC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC5B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,QAAQ,GAAGJ,KAAK,CAACN,KAAN,CAAYW,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA7C,CAAjB,CAF4B,CAEwC;;AAEpE,UAAI,CAACH,QAAL,EAAe;AAAK;AACnBJ,QAAAA,KAAK,CAACN,KAAN,CAAYc,IAAZ,CAAiB;AAChBC,UAAAA,MAAM,EAAEP,OAAO,CAACK,EADA;AAEhBG,UAAAA,KAAK,EAAER,OAAO,CAACQ,KAFC;AAGhBC,UAAAA,QAAQ,EAAE,CAHM;AAIhBC,UAAAA,UAAU,EAAEV,OAAO,CAACQ,KAJJ;AAKhBb,UAAAA,IAAI,EAAEK,OAAO,CAACW;AALE,SAAjB;AAOA,OARD,MAQO;AACNT,QAAAA,QAAQ,CAACO,QAAT,GADM,CACkB;;AACxBP,QAAAA,QAAQ,CAACQ,UAAT,GAAsBR,QAAQ,CAACQ,UAAT,GAAsBV,OAAO,CAACQ,KAApD,CAFM,CAEsD;AAC5D;AACD,KAjBQ;;AAkBTI,IAAAA,gBAAgB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AAC/B,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMY,YAAY,GAAGf,KAAK,CAACN,KAAN,CAAYW,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB,CAF+B,CAEiC;;AAChE,UAAIQ,YAAY,CAACJ,QAAb,KAA0B,CAA9B,EAAiC;AAChCX,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYsB,MAAZ,CAAmBV,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd,CADgC,CAC4B;AAC5D,OAFD,MAEO;AACNQ,QAAAA,YAAY,CAACJ,QAAb,GADM,CACsB;;AAC5BI,QAAAA,YAAY,CAACH,UAAb,GAA0BG,YAAY,CAACH,UAAb,GAA0BG,YAAY,CAACL,KAAjE,CAFM,CAEkE;AACxE;AAED;;AA5BQ;AAHmB,CAAD,CAA7B;AAmCA,OAAO,MAAMO,WAAW,GAAGrB,SAAS,CAACsB,OAA9B;AAEP,eAAetB,SAAf","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState = {items: [], totalQuantity: 0}\n\nconst cartSlice = createSlice({\n\tname: 'cart',\n\tinitialState,\n\treducers: {\n\t\taddItemToCart(state, action) {\n\t\t\tconst newItem = action.payload;\n\t\t\tconst existing = state.items.find(item => item.id === newItem.id)   //  se già ci sono elementi\n\t\t\t\n\t\t\tif (!existing) {    // se non ci sono elementi, pushali\n\t\t\t\tstate.items.push({\n\t\t\t\t\titemId: newItem.id,\n\t\t\t\t\tprice: newItem.price,\n\t\t\t\t\tquantity: 1,\n\t\t\t\t\ttotalPrice: newItem.price,\n\t\t\t\t\tname: newItem.title\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\texisting.quantity++;    //  altrimenti aggiungi quantità\n\t\t\t\texisting.totalPrice = existing.totalPrice + newItem.price;  //  e aggiorna il prezzo totale\n\t\t\t}\n\t\t},\n\t\tremoveItemToCart(state, action) {\n\t\t\tconst id = action.payload;\n\t\t\tconst existingItem = state.items.find(item => item.id === id)   //  trova gli elementi già presenti\n\t\t\tif (existingItem.quantity === 1) {\n\t\t\t\tstate.items = state.items.filter(item => item.id !== id)    //  smetti di togliere gli elementi\n\t\t\t} else {\n\t\t\t\texistingItem.quantity--;    //  altrimenti rimuovi elementi\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice - existingItem.price  // e aggiorna il prezzo totale\n\t\t\t}\n\n\t\t}\n\t}\n})\n\nexport const cartActions = cartSlice.actions\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}