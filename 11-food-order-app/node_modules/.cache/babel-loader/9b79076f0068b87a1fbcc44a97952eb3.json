{"ast":null,"code":"var _jsxFileName = \"/Users/stefanovolpatti/Web Development/react-complete-guide/11-food-order-app/src/components/Meals/AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport classes from './AvailableMeals.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]); //  array finale che conterrà i dati\n\n  const [isLoading, setIsLoading] = useState(true); // state che controlla il messaggio di Loading\n\n  const [httpError, setHttpError] = useState(); //  state che controlla eventuali errori\n  // GET call\n\n  useEffect(() => {\n    const fetchMeals = async () => {\n      const response = await fetch('https://food-order-app-158af-default-rtdb.europe-west1.firebasedatabase.app/Meals.json'); // Controllo errori di risposta\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      } //  Salvo i datri in arrivo in una costante\n\n\n      const responseData = await response.json(); //  Creo un array inizialmente vuoto che andrà poi a popolarsi dei dati\n\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        // Setto una key\n        loadedMeals.push({\n          //  L'array inizialmente vuoto viene popolato dai dati\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadedMeals); // salvo l'array nel mio state\n\n      setIsLoading(false); //  Setto a false siccome ha smesso di caricare\n    }; //  Imposto la chiamata per eventuali errori\n\n\n    fetchMeals().catch(error => {\n      setIsLoading(false); //  Setto a false siccome è presente un errore\n\n      setHttpError(error.message); // Salvo il controllo di errori in risposta nello state che verifica gli errori Http\n    });\n  }, []); //  Se sta caricando i dati, allora:\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this);\n  } //  Se si verifica un errore, allora:\n\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this);\n  } //  Salvo in una costante lo state maeal che conterrà il mio array finale popolato dei dati\n\n\n  const mealsList = meals.map(meal =>\n  /*#__PURE__*/\n  //  mapping\n  _jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this)); //  Renderizzo\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 3\n  }, this);\n};\n\n_s(AvailableMeals, \"6pndJp/WWpMtmhSnoCH9k0tFnXc=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/11-food-order-app/src/components/Meals/AvailableMeals.js"],"names":["useEffect","useState","Card","MealItem","classes","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","catch","error","message","MealsLoading","MealsError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import {useEffect, useState} from 'react';\n\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport classes from './AvailableMeals.module.css';\n\nconst AvailableMeals = () => {\n\tconst [meals, setMeals] = useState([]); //  array finale che conterrà i dati\n\tconst [isLoading, setIsLoading] = useState(true);   // state che controlla il messaggio di Loading\n\tconst [httpError, setHttpError] = useState();   //  state che controlla eventuali errori\n\n\t// GET call\n\tuseEffect(() => {\n\t\tconst fetchMeals = async () => {\n\t\t\tconst response = await fetch(\n\t\t\t\t'https://food-order-app-158af-default-rtdb.europe-west1.firebasedatabase.app/Meals.json'\n\t\t\t);\n\n\t\t\t// Controllo errori di risposta\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error('Something went wrong!');\n\t\t\t}\n\n\t\t\t//  Salvo i datri in arrivo in una costante\n\t\t\tconst responseData = await response.json();\n\n\t\t\t//  Creo un array inizialmente vuoto che andrà poi a popolarsi dei dati\n\t\t\tconst loadedMeals = [];\n\n\t\t\tfor (const key in responseData) {       // Setto una key\n\t\t\t\tloadedMeals.push({  //  L'array inizialmente vuoto viene popolato dai dati\n\t\t\t\t\tid: key,\n\t\t\t\t\tname: responseData[key].name,\n\t\t\t\t\tdescription: responseData[key].description,\n\t\t\t\t\tprice: responseData[key].price,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsetMeals(loadedMeals);  // salvo l'array nel mio state\n\t\t\tsetIsLoading(false);    //  Setto a false siccome ha smesso di caricare\n\t\t};\n\n\t\t//  Imposto la chiamata per eventuali errori\n\t\tfetchMeals().catch((error) => {\n\t\t\tsetIsLoading(false);    //  Setto a false siccome è presente un errore\n\t\t\tsetHttpError(error.message);    // Salvo il controllo di errori in risposta nello state che verifica gli errori Http\n\t\t});\n\t}, []);\n\n\t//  Se sta caricando i dati, allora:\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<section className={classes.MealsLoading}>\n\t\t\t\t<p>Loading...</p>\n\t\t\t</section>\n\t\t);\n\t}\n\n\t//  Se si verifica un errore, allora:\n\tif (httpError) {\n\t\treturn (\n\t\t\t<section className={classes.MealsError}>\n\t\t\t\t<p>{httpError}</p>\n\t\t\t</section>\n\t\t);\n\t}\n\t//  Salvo in una costante lo state maeal che conterrà il mio array finale popolato dei dati\n\tconst mealsList = meals.map((meal) => ( //  mapping\n\t\t<MealItem\n\t\t\tkey={meal.id}\n\t\t\tid={meal.id}\n\t\t\tname={meal.name}\n\t\t\tdescription={meal.description}\n\t\t\tprice={meal.price}\n\t\t/>\n\t));\n\n\t//  Renderizzo\n\treturn (\n\t\t<section className={classes.meals}>\n\t\t\t<Card>\n\t\t\t\t<ul>{mealsList}</ul>\n\t\t\t</Card>\n\t\t</section>\n\t);\n};\n\nexport default AvailableMeals;"]},"metadata":{},"sourceType":"module"}