{"ast":null,"code":"var _jsxFileName = \"/Users/stefanovolpatti/Web Development/react-complete-guide/11-food-order-app/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport classes from './Checkout.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === ''; // funzione che verifica che l'input sia vuoto\n\n\nconst isFiveChars = value => value.trim().length === 5; //  funzione che verifica che il postal code sia lungo 5\n\n\nconst Checkout = props => {\n  _s();\n\n  //  state iniziale per la validazione a true\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  }); // useRef\n\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault(); //  annulla l'evento se è annullabile\n    //  associo a delle costanti il valore per ogni dato utilizzando le precedenti ref\n\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value; //  verifica che i campi di input non siano vuoti\n\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity); //  verifica che il campo postalcoode sia delle lunghezza massima impostata\n\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode); //  associo allo state gli oggetti con il controllo effettuato precedentemente\n\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid\n    }); //  creao una costante globale che richiama tutte le costanti valide per ogni valore\n\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid; //  condizione che se il form non è valido, allora return\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postalCode: enteredPostalCode\n    });\n  };\n\n  const nameControlClasses = `${classes.control} ${formInputsValidity.name ? '' : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${formInputsValidity.street ? '' : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${formInputsValidity.postalCode ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputsValidity.city ? '' : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this), !formInputsValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid postal code (5 characters long)!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Checkout, \"+hEJMpm5kYVcmB3iMHhjurSc/lE=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/11-food-order-app/src/components/Cart/Checkout.js"],"names":["useRef","useState","classes","isEmpty","value","trim","isFiveChars","length","Checkout","props","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalCodeIsValid","formIsValid","onConfirm","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","form","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import {useRef, useState} from 'react';\n\nimport classes from './Checkout.module.css';\n\nconst isEmpty = (value) => value.trim() === ''; // funzione che verifica che l'input sia vuoto\nconst isFiveChars = (value) => value.trim().length === 5;   //  funzione che verifica che il postal code sia lungo 5\n\nconst Checkout = (props) => {\n\t//  state iniziale per la validazione a true\n\tconst [formInputsValidity, setFormInputsValidity] = useState({\n\t\tname: true,\n\t\tstreet: true,\n\t\tcity: true,\n\t\tpostalCode: true,\n\t});\n\n\t// useRef\n\tconst nameInputRef = useRef();\n\tconst streetInputRef = useRef();\n\tconst postalCodeInputRef = useRef();\n\tconst cityInputRef = useRef();\n\n\tconst confirmHandler = (event) => {\n\t\tevent.preventDefault(); //  annulla l'evento se è annullabile\n\n\t\t//  associo a delle costanti il valore per ogni dato utilizzando le precedenti ref\n\t\tconst enteredName = nameInputRef.current.value;\n\t\tconst enteredStreet = streetInputRef.current.value;\n\t\tconst enteredPostalCode = postalCodeInputRef.current.value;\n\t\tconst enteredCity = cityInputRef.current.value;\n\n\t\t//  verifica che i campi di input non siano vuoti\n\t\tconst enteredNameIsValid = !isEmpty(enteredName);\n\t\tconst enteredStreetIsValid = !isEmpty(enteredStreet);\n\t\tconst enteredCityIsValid = !isEmpty(enteredCity);\n\t\t//  verifica che il campo postalcoode sia delle lunghezza massima impostata\n\t\tconst enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n\n\t\t//  associo allo state gli oggetti con il controllo effettuato precedentemente\n\t\tsetFormInputsValidity({\n\t\t\tname: enteredNameIsValid,\n\t\t\tstreet: enteredStreetIsValid,\n\t\t\tcity: enteredCityIsValid,\n\t\t\tpostalCode: enteredPostalCodeIsValid,\n\t\t});\n\n\t\t//  creao una costante globale che richiama tutte le costanti valide per ogni valore\n\t\tconst formIsValid =\n\t\t\tenteredNameIsValid &&\n\t\t\tenteredStreetIsValid &&\n\t\t\tenteredCityIsValid &&\n\t\t\tenteredPostalCodeIsValid;\n\n\t\t//  condizione che se il form non è valido, allora return\n\t\tif (!formIsValid) {\n\t\t\treturn;\n\t\t}\n\n\t\tprops.onConfirm({\n\t\t\tname: enteredName,\n\t\t\tstreet: enteredStreet,\n\t\t\tcity: enteredCity,\n\t\t\tpostalCode: enteredPostalCode,\n\t\t});\n\t};\n\n\tconst nameControlClasses = `${classes.control} ${\n\t\tformInputsValidity.name ? '' : classes.invalid\n\t}`;\n\tconst streetControlClasses = `${classes.control} ${\n\t\tformInputsValidity.street ? '' : classes.invalid\n\t}`;\n\tconst postalCodeControlClasses = `${classes.control} ${\n\t\tformInputsValidity.postalCode ? '' : classes.invalid\n\t}`;\n\tconst cityControlClasses = `${classes.control} ${\n\t\tformInputsValidity.city ? '' : classes.invalid\n\t}`;\n\n\treturn (\n\t\t<form className={classes.form} onSubmit={confirmHandler}>\n\t\t\t<div className={nameControlClasses}>\n\t\t\t\t<label htmlFor='name'>Your Name</label>\n\t\t\t\t<input type='text' id='name' ref={nameInputRef}/>\n\t\t\t\t{!formInputsValidity.name && <p>Please enter a valid name!</p>}\n\t\t\t</div>\n\t\t\t<div className={streetControlClasses}>\n\t\t\t\t<label htmlFor='street'>Street</label>\n\t\t\t\t<input type='text' id='street' ref={streetInputRef}/>\n\t\t\t\t{!formInputsValidity.street && <p>Please enter a valid street!</p>}\n\t\t\t</div>\n\t\t\t<div className={postalCodeControlClasses}>\n\t\t\t\t<label htmlFor='postal'>Postal Code</label>\n\t\t\t\t<input type='text' id='postal' ref={postalCodeInputRef}/>\n\t\t\t\t{!formInputsValidity.postalCode && (\n\t\t\t\t\t<p>Please enter a valid postal code (5 characters long)!</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className={cityControlClasses}>\n\t\t\t\t<label htmlFor='city'>City</label>\n\t\t\t\t<input type='text' id='city' ref={cityInputRef}/>\n\t\t\t\t{!formInputsValidity.city && <p>Please enter a valid city!</p>}\n\t\t\t</div>\n\t\t\t<div className={classes.actions}>\n\t\t\t\t<button type='button' onClick={props.onCancel}>\n\t\t\t\t\tCancel\n\t\t\t\t</button>\n\t\t\t\t<button className={classes.submit}>Confirm</button>\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\nexport default Checkout;"]},"metadata":{},"sourceType":"module"}