{"ast":null,"code":"var _jsxFileName = \"/Users/stefanovolpatti/Web Development/react-complete-guide/14-HTTP-Request-in-React/src/App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true); // Esegui il loading o mostra la scritta 'Found no movies'\n\n    setError(null);\n\n    try {\n      // Di default è impostata la GET dunque non serve mettere il metodo\n      const response = await fetch('https://swapi.dev/api/film'); // Se qualcosa va storto, esegui questo\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json(); // mappo gli oggetti della fetch con i nomi che voglio io riportandoli in Movies.js\n\n      const transormedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transormedMovies); // Se qualcosa va storto, mostra il messaggio\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n    /* Ritorna a false, non ha importanza se la richiesta\n             ha avuto successo o errore, perchè in entrambi i\n             casi, smette di caricare.\n          */\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }\n  }, \"Found no movies\");\n\n  if (movies.length > 0) {}\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 53\n    }\n  }), !isLoading && movies.length === 0 && !error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 65\n    }\n  }, \"Found no movies.\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 41\n    }\n  }, error), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 31\n    }\n  }, \"Loading...\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/14-HTTP-Request-in-React/src/App.js"],"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transormedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","content","length"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n    const [movies, setMovies] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    const [error, setError] = useState(null)\n\n    async function fetchMoviesHandler() {\n\n        setIsLoading(true)  // Esegui il loading o mostra la scritta 'Found no movies'\n        setError(null)\n\n        try {\n            // Di default è impostata la GET dunque non serve mettere il metodo\n            const response = await fetch('https://swapi.dev/api/film')\n\n            // Se qualcosa va storto, esegui questo\n            if (!response.ok) {\n                throw new Error('Something went wrong!')\n            }\n\n            const data = await response.json();\n\n\n            // mappo gli oggetti della fetch con i nomi che voglio io riportandoli in Movies.js\n            const transormedMovies = data.results.map(movieData => {\n                return {\n                    id: movieData.episode_id,\n                    title: movieData.title,\n                    openingText: movieData.opening_crawl,\n                    releaseDate: movieData.release_date\n                }\n            })\n            setMovies(transormedMovies)\n\n            // Se qualcosa va storto, mostra il messaggio\n        } catch (error) {\n            setError(error.message)\n        }\n        setIsLoading(false) /* Ritorna a false, non ha importanza se la richiesta\n                                     ha avuto successo o errore, perchè in entrambi i\n                                     casi, smette di caricare.\n                                  */\n    }\n\n    let content = <p>Found no movies</p>\n    if (movies.length > 0) {\n        \n    }\n\n    if (error) {\n        content = <p>{error}</p>\n    }\n    if (isLoading) {\n        content = <p>Loading...</p>\n    }\n\n    return (\n        <React.Fragment>\n            <section>\n                <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n            </section>\n            <section>\n                {/* SE HA CARICATO I DATI ALLORA: */}\n                {!isLoading && movies.length > 0 && <MoviesList movies={movies}/>}\n\n                {/* SE NON CI SONO DATI PRESENTI */}\n                {!isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\n\n                {/*SE NON STA CARICANDO E ABBIAMO UN ERRORE ALLORA: */}\n                {!isLoading && error && <p>{error}</p>}\n\n                {/* SE STA CARICADNO I DATI ALLORA: */}\n                {isLoading && <p>Loading...</p>}\n            </section>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}