{"ast":null,"code":"var _jsxFileName = \"/Users/stefanovolpatti/Web Development/react-complete-guide/14-HTTP-Request-in-React/src/App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function fetchMoviesHandler() {\n    // Esegui il loading o mostra la scritta 'Found no movies'\n    setIsLoading(true); // Di default è impostata la GET dunque non serve mettere il metodo\n\n    const response = await fetch('https://swapi.dev/api/films');\n    const data = await response.json(); // mappo gli oggetti della fetch con i nomi che voglio io riportandoli in Movies.js\n\n    const transormedMovies = data.results.map(movieData => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date\n      };\n    });\n    setMovies(transormedMovies); // Ritorna a false siccome ho già ricevuto i dati\n\n    setIsLoading(false);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 53\n    }\n  }), !isLoading && movies.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 55\n    }\n  }, \"Found no movies.\"), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 31\n    }\n  }, \"Loading...\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/14-HTTP-Request-in-React/src/App.js"],"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","fetchMoviesHandler","response","fetch","data","json","transormedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","length"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACX,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;;AAEA,iBAAeO,kBAAf,GAAoC;AAEhC;AACAD,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAHgC,CAKhC;;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAPgC,CAShC;;AACA,UAAMC,gBAAgB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBC,SAAS,IAAI;AACnD,aAAO;AACHC,QAAAA,EAAE,EAAED,SAAS,CAACE,UADX;AAEHC,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAFd;AAGHC,QAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHpB;AAIHC,QAAAA,WAAW,EAAEN,SAAS,CAACO;AAJpB,OAAP;AAMH,KAPwB,CAAzB;AAQAlB,IAAAA,SAAS,CAACQ,gBAAD,CAAT,CAlBgC,CAmBhC;;AACAN,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AAED,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAEC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEK,CAACF,SAAD,IAAcF,MAAM,CAACoB,MAAP,GAAgB,CAA9B,iBAAmC,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEpB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFxC,EAIK,CAACE,SAAD,IAAcF,MAAM,CAACoB,MAAP,KAAkB,CAAhC,iBAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJ1C,EAMKlB,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANlB,CAJJ,CADJ;AAeH;;AAED,eAAeH,GAAf","sourcesContent":["import React, {useState} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n    const [movies, setMovies] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n\n    async function fetchMoviesHandler() {\n\n        // Esegui il loading o mostra la scritta 'Found no movies'\n        setIsLoading(true)\n\n        // Di default è impostata la GET dunque non serve mettere il metodo\n        const response = await fetch('https://swapi.dev/api/films')\n        const data = await response.json();\n\n        // mappo gli oggetti della fetch con i nomi che voglio io riportandoli in Movies.js\n        const transormedMovies = data.results.map(movieData => {\n            return {\n                id: movieData.episode_id,\n                title: movieData.title,\n                openingText: movieData.opening_crawl,\n                releaseDate: movieData.release_date\n            }\n        })\n        setMovies(transormedMovies)\n        // Ritorna a false siccome ho già ricevuto i dati\n        setIsLoading(false)\n    }\n\n    return (\n        <React.Fragment>\n            <section>\n                <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n            </section>\n            <section>\n                {/* SE NON HA CARICATO I DATI ALLORA: */}\n                {!isLoading && movies.length > 0 && <MoviesList movies={movies}/>}\n                {/* SE NON CI SONO DATI PRESENTI */}\n                {!isLoading && movies.length === 0 && <p>Found no movies.</p>}\n                {/* SE STA CARICADNO I DATI ALLORA: */}\n                {isLoading && <p>Loading...</p>}\n            </section>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}