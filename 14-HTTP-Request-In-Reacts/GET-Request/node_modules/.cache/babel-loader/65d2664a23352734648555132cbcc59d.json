{"ast":null,"code":"var _jsxFileName = \"/Users/stefanovolpatti/Web Development/react-complete-guide/14-HTTP-Request-in-React/src/App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n\n  async function fetchMoviesHandler() {\n    // Di default è impostata la GET dunque non serve mettere il metodo\n    const response = await fetch('https://swapi.dev/api/films').then(response => {\n      return response.json();\n    }).then(data => {\n      // mappo gli oggetti della fetch con i nomi che voglio io riportandoli in Movies.js\n      const transormedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transormedMovies);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/14-HTTP-Request-in-React/src/App.js"],"names":["React","useState","MoviesList","App","movies","setMovies","fetchMoviesHandler","response","fetch","then","json","data","transormedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACX,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;;AAEA,iBAAeK,kBAAf,GAAoC;AAEhC;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAL,CAAqCC,IAArC,CAA0CF,QAAQ,IAAI;AACzE,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACH,KAFsB,EAEpBD,IAFoB,CAEfE,IAAI,IAAI;AAEZ;AACA,YAAMC,gBAAgB,GAAGD,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAiBC,SAAS,IAAI;AACnD,eAAO;AACHC,UAAAA,EAAE,EAAED,SAAS,CAACE,UADX;AAEHC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAFd;AAGHC,UAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHpB;AAIHC,UAAAA,WAAW,EAAEN,SAAS,CAACO;AAJpB,SAAP;AAMH,OAPwB,CAAzB;AAQAjB,MAAAA,SAAS,CAACO,gBAAD,CAAT;AACH,KAdsB,CAAvB;AAeH;;AAED,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAEN,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEF,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,CADJ;AAUH;;AAED,eAAeD,GAAf","sourcesContent":["import React, {useState} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n    const [movies, setMovies] = useState([])\n\n    async function fetchMoviesHandler() {\n\n        // Di default è impostata la GET dunque non serve mettere il metodo\n        const response = await fetch('https://swapi.dev/api/films').then(response => {\n            return response.json();\n        }).then(data => {\n\n            // mappo gli oggetti della fetch con i nomi che voglio io riportandoli in Movies.js\n            const transormedMovies = data.results.map(movieData => {\n                return {\n                    id: movieData.episode_id,\n                    title: movieData.title,\n                    openingText: movieData.opening_crawl,\n                    releaseDate: movieData.release_date\n                }\n            })\n            setMovies(transormedMovies)\n        })\n    }\n\n    return (\n        <React.Fragment>\n            <section>\n                <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n            </section>\n            <section>\n                <MoviesList movies={movies}/>\n            </section>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}