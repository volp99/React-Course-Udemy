{"ast":null,"code":"var _jsxFileName = \"/Users/stefanovolpatti/Web Development/react-complete-guide/21-Authentication/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTime;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const initialToken = localStorage.getItem('token');\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token; // If token is a string that's not empty,this will return true,if token is a string that is empty, this will return false.\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.clear();\n    localStorage.removeItem('token');\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem('token', token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(loginHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/21-Authentication/src/store/auth-context.js"],"names":["React","useState","logoutTime","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","logoutHandler","clear","removeItem","logoutTimer","clearTimeout","loginHandler","setItem","remainingTime","setTimeout","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,IAAIC,UAAJ;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACvCC,EAAAA,KAAK,EAAE,EADgC;AAEvCC,EAAAA,UAAU,EAAE,KAF2B;AAGvCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CACjB,CAJsC;AAKvCG,EAAAA,MAAM,EAAE,MAAM,CACb;AANsC,CAApB,CAApB;;AASA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AAClD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B;AACA,QAAME,iBAAiB,GAAGD,iBAAiB,GAAGH,WAA9C;AACA,SAAOI,iBAAP;AACA,CALD;;AAOA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC7C,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;AACA,QAAM,CAACf,KAAD,EAAQgB,QAAR,IAAoBpB,QAAQ,CAACiB,YAAD,CAAlC;AAEA,QAAMI,cAAc,GAAG,CAAC,CAACjB,KAAzB,CAJ6C,CAIb;;AAEhC,QAAMkB,aAAa,GAAG,MAAM;AAC3BF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,YAAY,CAACK,KAAb;AACAL,IAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;;AAEA,QAAIC,WAAJ,EAAiB;AAChBC,MAAAA,YAAY,CAACD,WAAD,CAAZ;AACA;AACD,GARD;;AAUA,QAAME,YAAY,GAAG,CAACvB,KAAD,EAAQK,cAAR,KAA2B;AAC/CW,IAAAA,QAAQ,CAAChB,KAAD,CAAR;AACAc,IAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BxB,KAA9B;AAEA,UAAMyB,aAAa,GAAGrB,sBAAsB,CAACC,cAAD,CAA5C;AACAgB,IAAAA,WAAW,GAAGK,UAAU,CAACH,YAAD,EAAeE,aAAf,CAAxB;AACA,GAND;;AAQA,QAAME,YAAY,GAAG;AACpB3B,IAAAA,KAAK,EAAEA,KADa;AAEpBC,IAAAA,UAAU,EAAEgB,cAFQ;AAGpBf,IAAAA,KAAK,EAAEqB,YAHa;AAIpBpB,IAAAA,MAAM,EAAEe;AAJY,GAArB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAES,YAA7B;AAAA,cAA4Cf,KAAK,CAACgB;AAAlD;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CAhCM;;GAAMjB,mB;;KAAAA,mB;AAiCb,eAAeb,WAAf","sourcesContent":["import React, {useState} from 'react';\n\nlet logoutTime;\n\nconst AuthContext = React.createContext({\n\ttoken: '',\n\tisLoggedIn: false,\n\tlogin: (token) => {\n\t},\n\tlogout: () => {\n\t},\n})\n\nconst calculateRemainingTime = (expirationTime) => {\n\tconst currentTime = new Date().getTime();\n\tconst adjExpirationTime = new Date(expirationTime).getTime();\n\tconst remainingDuration = adjExpirationTime - currentTime\n\treturn remainingDuration;\n}\n\nexport const AuthContextProvider = (props) => {\n\tconst initialToken = localStorage.getItem('token')\n\tconst [token, setToken] = useState(initialToken)\n\n\tconst userIsLoggedIn = !!token; // If token is a string that's not empty,this will return true,if token is a string that is empty, this will return false.\n\n\tconst logoutHandler = () => {\n\t\tsetToken(null)\n\t\tlocalStorage.clear()\n\t\tlocalStorage.removeItem('token')\n\n\t\tif (logoutTimer) {\n\t\t\tclearTimeout(logoutTimer)\n\t\t}\n\t}\n\n\tconst loginHandler = (token, expirationTime) => {\n\t\tsetToken(token)\n\t\tlocalStorage.setItem('token', token)\n\n\t\tconst remainingTime = calculateRemainingTime(expirationTime)\n\t\tlogoutTimer = setTimeout(loginHandler, remainingTime)\n\t}\n\n\tconst contextValue = {\n\t\ttoken: token,\n\t\tisLoggedIn: userIsLoggedIn,\n\t\tlogin: loginHandler,\n\t\tlogout: logoutHandler,\n\t}\n\n\treturn <AuthContext.Provider value={contextValue}>{props.children}</AuthContext.Provider>\n}\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}