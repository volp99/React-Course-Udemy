{"ast":null,"code":"var _jsxFileName = \"/Users/stefanovolpatti/Web Development/react-complete-guide/21-Authentication/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [token, setToken] = useState(null);\n  const userIsLoggedIn = !!token; // If token is a string that's not empty,this will return true,if token is a string that is empty, this will return false.\n\n  const loginHandler = token => {\n    setToken(token);\n  };\n\n  const logoutHandler = () => {\n    setToken(null);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvider, \"e+LEOB8XbRIRiSUQHKM4ToWFki4=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/stefanovolpatti/Web Development/react-complete-guide/21-Authentication/src/store/auth-context.js"],"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","AuthContextProvider","props","setToken","userIsLoggedIn","loginHandler","logoutHandler","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACvCC,EAAAA,KAAK,EAAE,EADgC;AAEvCC,EAAAA,UAAU,EAAE,KAF2B;AAGvCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CACjB,CAJsC;AAKvCG,EAAAA,MAAM,EAAE,MAAM,CACb;AANsC,CAApB,CAApB;AASA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC7C,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMU,cAAc,GAAG,CAAC,CAACP,KAAzB,CAH6C,CAGb;;AAEhC,QAAMQ,YAAY,GAAIR,KAAD,IAAW;AAC/BM,IAAAA,QAAQ,CAACN,KAAD,CAAR;AACA,GAFD;;AAGA,QAAMS,aAAa,GAAG,MAAM;AAC3BH,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,GAFD;;AAIA,QAAMI,YAAY,GAAG;AACpBV,IAAAA,KAAK,EAAEA,KADa;AAEpBC,IAAAA,UAAU,EAAEM,cAFQ;AAGpBL,IAAAA,KAAK,EAAEM,YAHa;AAIpBL,IAAAA,MAAM,EAAEM;AAJY,GAArB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,YAA7B;AAAA,cAA4CL,KAAK,CAACM;AAAlD;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CApBM;;GAAMP,mB;;KAAAA,mB;AAqBb,eAAeN,WAAf","sourcesContent":["import React, {useState} from 'react';\n\nconst AuthContext = React.createContext({\n\ttoken: '',\n\tisLoggedIn: false,\n\tlogin: (token) => {\n\t},\n\tlogout: () => {\n\t},\n})\n\nexport const AuthContextProvider = (props) => {\n\tconst [token, setToken] = useState(null)\n\n\tconst userIsLoggedIn = !!token; // If token is a string that's not empty,this will return true,if token is a string that is empty, this will return false.\n\n\tconst loginHandler = (token) => {\n\t\tsetToken(token)\n\t}\n\tconst logoutHandler = () => {\n\t\tsetToken(null)\n\t}\n\n\tconst contextValue = {\n\t\ttoken: token,\n\t\tisLoggedIn: userIsLoggedIn,\n\t\tlogin: loginHandler,\n\t\tlogout: logoutHandler,\n\t}\n\n\treturn <AuthContext.Provider value={contextValue}>{props.children}</AuthContext.Provider>\n}\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}